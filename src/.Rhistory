?ftable
library(rgdal)
library(sp)
library(caret)
inpath_ecol <- "D:/active/moc/am-remote-sensing/examples/data/ecology/2015/"
scale <- function(df){
df_means <- colMeans(df, na.rm = TRUE)
df_sds <- apply(df, 2, sd, na.rm=TRUE)
df_scale <- lapply(seq(ncol(df)), function(x){
(df[,x] - df_means[x]) / df_sds[x]
})
df_scale <- do.call ("cbind", df_scale)
colnames(df_scale) <- colnames(df)
return(df_scale)
}
traintest_df <- function(pred, resp){
train_ids <- createDataPartition(resp, times=1, p=0.75, list = FALSE)
#   train_ids <- seq(length(resp))
train_resp <- resp[train_ids]
train_pred <- pred[train_ids, ]
test_resp <- resp[-train_ids]
test_pred <- pred[-train_ids, ]
return(list(train_resp, train_pred, test_resp, test_pred))
}
ecol_db <- readOGR(paste0(inpath_ecol, "ecol_db.shp"), layer = "ecol_db")
ecol_db <- data.frame(ecol_db)
ecol_hg <- readOGR(paste0(inpath_ecol, "ecol_hg.shp"), layer = "ecol_hg")
ecol_hg <- data.frame(ecol_hg)
ecol <- ecol_hg
coln_resp <- which(names(ecol) == "d12_k5")
coln_pred <- c(which(names(ecol)=="re01"):which(names(ecol)=="zrsd"))
resp <- ecol[, coln_resp]
pred <- ecol[, coln_pred]
pred_scale <- scale(pred)
summary(pred_scale)
l <- traintest_df(pred = pred_scale, resp = resp)
l
train_resp <- l[[1]]
train_pred <- l[[2]]
test_resp <- l[[3]]
test_pred <- l[[4]]
train_resp
train_pred
test_resp
test_pred
set.seed(10)
cv_splits <- createFolds(resp, k=5, returnTrain = TRUE)
cv_splits
cv_splits <- createFolds(train_resp, k=5, returnTrain = TRUE)
cv_splits
rfeCntrl <- rfeControl(functions = caretFuncs,
method="cv", index = cv_splits,
returnResamp = "all",
verbose = FALSE,
rerank=TRUE)
trCntr <- trainControl(method="cv", number = 5, repeats = 1, verbose = FALSE)
n_var <- seq(2, ncol(train_pred), 8)
n_var
n_var <- seq(2, ncol(train_pred), 8)
rfe_model <- rfe(train_pred, train_resp,
metric = "Accuracy", method = "rf",
sizes = n_var,
rfeControl = rfeCntrl,
trControl = trCntr,
tuneGrid = expand.grid(mtry = n_var))
?save
rfe_model
plot(varImp(rfe_model$fit,scale=TRUE))
choose_n_var <- 10
choose_n_var
pickVars(rfe_model$variables, choose_n_var)
trCntr <- trainControl(method="cv", number = 5, repeats = 1, verbose = TRUE)
rf_train <- train(train_pred[,pickVars(rfe_model$variables, 12)], train_resp,
metric = "Accuracy", method = "rf",
trControl = trCntr,
tuneGrid = expand.grid(mtry=c(2:ncol(train_pred))))
predict(rf_train, test_pred)
test_pred
predict(rf_train, test_pred)
test_resp
library(rgdal)
library(sp)
library(caret)
inpath_ecol <- "D:/active/moc/am-remote-sensing/examples/data/ecology/2015/"
traintest_df <- function(pred, resp){
train_ids <- createDataPartition(resp, times=1, p=0.75, list = FALSE)
#   train_ids <- seq(length(resp))
train_resp <- resp[train_ids]
train_pred <- pred[train_ids, ]
test_resp <- resp[-train_ids]
test_pred <- pred[-train_ids, ]
return(list(train_resp, train_pred, test_resp, test_pred))
}
ecol_db <- readOGR(paste0(inpath_ecol, "ecol_db.shp"), layer = "ecol_db")
ecol_db <- data.frame(ecol_db)
ecol_hg <- readOGR(paste0(inpath_ecol, "ecol_hg.shp"), layer = "ecol_hg")
ecol_hg <- data.frame(ecol_hg)
traintest_df <- function(pred, resp){
train_ids <- createDataPartition(resp, times=1, p=0.75, list = FALSE)
#   train_ids <- seq(length(resp))
train_resp <- resp[train_ids]
train_pred <- pred[train_ids, ]
test_resp <- resp[-train_ids]
test_pred <- pred[-train_ids, ]
return(list(train_resp, train_pred, test_resp, test_pred))
}
library(rgdal)
library(sp)
library(caret)
inpath_ecol <- "D:/active/moc/am-remote-sensing/examples/data/ecology/2015/"
ecol_db <- readOGR(paste0(inpath_ecol, "ecol_db.shp"), layer = "ecol_db")
ecol_db <- data.frame(ecol_db)
ecol_hg <- readOGR(paste0(inpath_ecol, "ecol_hg.shp"), layer = "ecol_hg")
ecol_hg <- data.frame(ecol_hg)
ecol <- ecol_hg
coln_resp <- which(names(ecol) == "d12_k5")
coln_pred <- c(which(names(ecol)=="re01"):which(names(ecol)=="zrsd"))
resp <- ecol[, coln_resp]
pred <- ecol[, coln_pred]
l <- traintest_df(pred = pred, resp = resp)
train_resp <- l[[1]]
train_pred <- l[[2]]
test_resp <- l[[3]]
test_pred <- l[[4]]
train_resp
train_pred
test_resp
test_pred
set.seed(10)
cv_splits <- createFolds(train_resp, k=5, returnTrain = TRUE)
library(rpart)
library(latticeExtra)
data(iris)
iris$Label <- substr(iris$Species, 1, 3)
iris$Label <- replace(iris$Label, which(iris$Label=="set"), "S")
iris$Label <- replace(iris$Label, which(iris$Label=="ver"), "C")
iris$Label <- replace(iris$Label, which(iris$Label=="vir"), "G")
library(latticeExtra)
library(rgdal)
library(sp)
library(caret)
inpath_ecol <- "D:/active/moc/am-remote-sensing/examples/data/ecology/2015/"
scale <- function(df){
df_means <- colMeans(df, na.rm = TRUE)
df_sds <- apply(df, 2, sd, na.rm=TRUE)
df_scale <- lapply(seq(ncol(df)), function(x){
(df[,x] - df_means[x]) / df_sds[x]
})
df_scale <- do.call ("cbind", df_scale)
colnames(df_scale) <- colnames(df)
return(df_scale)
}
traintest_df <- function(pred, resp){
train_ids <- createDataPartition(resp, times=1, p=0.75, list = FALSE)
train_resp <- resp[train_ids]
train_pred <- pred[train_ids, ]
test_resp <- resp[-train_ids]
test_pred <- pred[-train_ids, ]
return(list(train_resp, train_pred, test_resp, test_pred))
}
ecol_db <- readOGR(paste0(inpath_ecol, "ecol_db.shp"), layer = "ecol_db")
ecol_db <- data.frame(ecol_db)
ecol_hg <- readOGR(paste0(inpath_ecol, "ecol_hg.shp"), layer = "ecol_hg")
ecol_hg <- data.frame(ecol_hg)
ecol <- ecol_hg
coln_resp <- which(names(ecol) == "d12_k5")
coln_pred <- c(which(names(ecol)=="re01"):which(names(ecol)=="zrsd"))
resp <- ecol[, coln_resp]
pred <- ecol[, coln_pred]
resp
pred
pred_scale <- scale(pred)
pred_scale
summary(pred_scale)
l <- traintest_df(pred = pred_scale, resp = resp)
train_resp <- l[[1]]
train_pred <- l[[2]]
test_resp <- l[[3]]
test_pred <- l[[4]]
train_resp
train_pred
test_resp
test_pred
traintest_df <- function(pred, resp, times = 1, p = 0.75, list = FALSE){
train_ids <- createDataPartition(resp, times = times, p = p, list = list)
train_resp <- resp[train_ids]
train_pred <- pred[train_ids, ]
test_resp <- resp[-train_ids]
test_pred <- pred[-train_ids, ]
return(list(train_resp, train_pred, test_resp, test_pred))
}
l <- traintest_df(pred = pred_scale, resp = resp, p = 0.9)
train_resp <- l[[1]]
train_pred <- l[[2]]
test_resp <- l[[3]]
test_pred <- l[[4]]
test_pred
test_resp
l <- traintest_df(pred = pred_scale, resp = resp, p = 0.1)
l
test_pred <- l[[4]]
test_pred
test_resp <- l[[3]]
test_resp
l[[1]]
l <- traintest_df(pred = pred_scale, resp = resp, p = 0.05)
l[[1]]
l[[3]]
l <- traintest_df(pred = pred_scale, resp = resp, p = 0.9)
train_resp <- l[[1]]
train_pred <- l[[2]]
test_resp <- l[[3]]
test_pred <- l[[4]]
test_pred
test_resp
l <- traintest_df(pred = pred_scale, resp = resp, p = 0.8)
train_resp <- l[[1]]
train_pred <- l[[2]]
test_resp <- l[[3]]
test_pred <- l[[4]]
test_resp
l <- traintest_df(pred = pred_scale, resp = resp, p = 0.85)
train_resp <- l[[1]]
train_pred <- l[[2]]
test_resp <- l[[3]]
test_pred <- l[[4]]
test_resp
l <- traintest_df(pred = pred_scale, resp = resp, p = 0.80)
train_resp <- l[[1]]
train_pred <- l[[2]]
test_resp <- l[[3]]
test_pred <- l[[4]]
library(rgdal)
library(sp)
library(caret)
inpath_ecol <- "D:/active/moc/am-remote-sensing/examples/data/ecology/2015/"
scale <- function(df){
df_means <- colMeans(df, na.rm = TRUE)
df_sds <- apply(df, 2, sd, na.rm=TRUE)
df_scale <- lapply(seq(ncol(df)), function(x){
(df[,x] - df_means[x]) / df_sds[x]
})
df_scale <- do.call ("cbind", df_scale)
colnames(df_scale) <- colnames(df)
return(df_scale)
}
traintest_df <- function(pred, resp, times=1, p=0.75, list = FALSE){
train_ids <- createDataPartition(resp, times=1, p=0.75, list = FALSE)
#   train_ids <- seq(length(resp))
train_resp <- resp[train_ids]
train_pred <- pred[train_ids, ]
test_resp <- resp[-train_ids]
test_pred <- pred[-train_ids, ]
return(list(train_resp, train_pred, test_resp, test_pred))
}
traintest_df <- function(pred, resp, times=1, p=0.75, list = FALSE){
train_ids <- createDataPartition(resp, times = times, p = p, list = list)
#   train_ids <- seq(length(resp))
train_resp <- resp[train_ids]
train_pred <- pred[train_ids, ]
test_resp <- resp[-train_ids]
test_pred <- pred[-train_ids, ]
return(list(train_resp, train_pred, test_resp, test_pred))
}
traintest_df <- function(pred, resp, times=1, p=0.75, list = FALSE){
train_ids <- createDataPartition(resp, times = times, p = p, list = list)
train_resp <- resp[train_ids]
train_pred <- pred[train_ids, ]
test_resp <- resp[-train_ids]
test_pred <- pred[-train_ids, ]
return(list(train_resp, train_pred, test_resp, test_pred))
}
ecol_db <- readOGR(paste0(inpath_ecol, "ecol_db.shp"), layer = "ecol_db")
ecol_db <- data.frame(ecol_db)
ecol_hg <- readOGR(paste0(inpath_ecol, "ecol_hg.shp"), layer = "ecol_hg")
ecol_hg <- data.frame(ecol_hg)
ecol <- ecol_hg
coln_resp <- which(names(ecol) == "d12_k5")
coln_pred <- c(which(names(ecol)=="re01"):which(names(ecol)=="zrsd"))
resp <- ecol[, coln_resp]
pred <- ecol[, coln_pred]
pred_scale <- scale(pred)
summary(pred_scale)
l <- traintest_df(pred = pred_scale, resp = resp, p = 0.8)
train_resp <- l[[1]]
train_pred <- l[[2]]
test_resp <- l[[3]]
test_pred <- l[[4]]
test_resp
set.seed(10)
cv_splits <- createFolds(train_resp, k=5, returnTrain = TRUE)
rfeCntrl <- rfeControl(functions = caretFuncs,
method="cv", index = cv_splits,
returnResamp = "all",
verbose = FALSE,
rerank=TRUE)
trCntr <- trainControl(method="cv", number = 5, repeats = 1, verbose = FALSE)
n_var <- seq(2, ncol(train_pred), 8)
rfe_model <- rfe(train_pred, train_resp,
metric = "Accuracy", method = "rf",
sizes = n_var,
rfeControl = rfeCntrl,
trControl = trCntr,
tuneGrid = expand.grid(mtry = n_var))
warnings()
n_var
rfe_model
train_pred
cor(train_pred)
library(corrplot)
corrplot(cor(train_pred))
n_var <- c(2:10)
rfe_model <- rfe(train_pred, train_resp,
metric = "Accuracy", method = "rf",
sizes = n_var,
rfeControl = rfeCntrl,
trControl = trCntr,
tuneGrid = expand.grid(mtry = n_var))
rfe_model
traintest_df <- function(pred, resp, p=0.75){
train_ids <- createDataPartition(resp, p = p, times = 1, list = FALSE)
train_resp <- resp[train_ids]
train_pred <- pred[train_ids, ]
test_resp <- resp[-train_ids]
test_pred <- pred[-train_ids, ]
return(list(train_resp, train_pred, test_resp, test_pred))
}
l <- traintest_df(pred = pred_scale, resp = resp, p = 0.8)
train_resp <- l[[1]]
train_pred <- l[[2]]
test_resp <- l[[3]]
test_pred <- l[[4]]
?rfeControl
rfeCntrl <- rfeControl(functions = rfFuncs,
method="cv", index = cv_splits,
returnResamp = "all",
verbose = FALSE,
rerank=TRUE)
n_var <- seq(2, ncol(train_pred), 8)
n_var <- c(2:10)
rfe_model <- rfe(train_pred, train_resp,
metric = "Accuracy", method = "rf",
sizes = n_var,
rfeControl = rfeCntrl,
trControl = trCntr,
tuneGrid = expand.grid(mtry = n_var))
set.seed(10)
cv_splits <- createFolds(train_resp, k=5, returnTrain = TRUE)
rfeCntrl <- rfeControl(functions = caretFuncs,
method="cv", index = cv_splits,
returnResamp = "all",
verbose = FALSE,
rerank=TRUE)
trCntr <- trainControl(method="cv", number = 5, repeats = 1, verbose = FALSE)
n_var <- seq(2, ncol(train_pred), 8)
n_var <- c(2:10)
rfe_model <- rfe(train_pred, train_resp,
metric = "Accuracy", method = "rf",
sizes = n_var,
rfeControl = rfeCntrl,
trControl = trCntr,
tuneGrid = expand.grid(mtry = n_var))
set.seed(10)
cv_splits <- createFolds(train_resp, k=5, returnTrain = TRUE)
rfeCntrl <- rfeControl(functions = rfFuncs,
method="cv", index = cv_splits,
returnResamp = "all",
verbose = FALSE,
rerank=TRUE)
trCntr <- trainControl(method="cv", number = 5, repeats = 1, verbose = FALSE)
n_var <- seq(2, ncol(train_pred), 8)
n_var <- c(2:10)
rfe_model <- rfe(train_pred, train_resp,
metric = "Accuracy", method = "rf",
sizes = n_var,
rfeControl = rfeCntrl,
trControl = trCntr,
tuneGrid = expand.grid(mtry = n_var))
rfeCntrl <- rfeControl(functions = rfFuncs,
method="cv", index = cv_splits,
returnResamp = "all",
verbose = FALSE,
rerank=FALSE)
n_var <- seq(2, ncol(train_pred), 8)
n_var <- c(2:10)
rfe_model <- rfe(train_pred, train_resp,
metric = "Accuracy", method = "rf",
sizes = n_var,
rfeControl = rfeCntrl,
trControl = trCntr,
tuneGrid = expand.grid(mtry = n_var))
rfe_model
set.seed(10)
cv_splits <- createFolds(train_resp, k=5, returnTrain = TRUE)
train_resp
cv_splits
cv_splits
rfeCntrl <- rfeControl(functions = rfFuncs,
method="cv", index = cv_splits,
returnResamp = "all",
verbose = FALSE,
rerank=FALSE)
rfeCntrl
?trainControl
trCntr <- trainControl(method="cv", number = 5, repeats = 1, verbose = FALSE)
n_var <- c(2:10)
rfe_model <- rfe(train_pred, train_resp,
metric = "Accuracy", method = "rf",
sizes = n_var,
rfeControl = rfeCntrl,
trControl = trCntr,
tuneGrid = expand.grid(mtry = n_var))
rfe_model
